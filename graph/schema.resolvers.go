package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.26

import (
	"context"

	"github.com/AI1411/go-grpc-praphql/graph/model"
	"github.com/AI1411/go-grpc-praphql/grpc"
)

// CreateUser is the resolver for the CreateUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*model.User, error) {
	_, err := r.UserClient.CreateUser(ctx, &grpc.CreateUserRequest{
		Username:     input.Username,
		Email:        input.Email,
		Password:     input.Password,
		Prefecture:   grpc.Prefecture(input.Prefecture),
		Introduction: input.Introduction,
		BloodType:    grpc.BloodType(input.BloodType),
	})

	if err != nil {
		return nil, err
	}

	return nil, nil
}

// GetUser is the resolver for the user field.
func (r *queryResolver) GetUser(ctx context.Context, input string) (*model.User, error) {
	user, err := r.UserClient.GetUser(ctx, &grpc.GetUserRequest{
		Id: input,
	})
	if err != nil {
		return nil, err
	}

	return &model.User{
		ID:         user.User.GetId(),
		Username:   user.User.GetUsername(),
		Email:      user.User.GetEmail(),
		Password:   user.User.GetPassword(),
		Status:     user.User.GetStatus().String(),
		Prefecture: user.User.GetPrefecture().String(),
		BloodType:  user.User.GetBloodType().String(),
		CreatedAt:  user.User.GetCreatedAt().String(),
		UpdatedAt:  user.User.GetUpdatedAt().String(),
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
