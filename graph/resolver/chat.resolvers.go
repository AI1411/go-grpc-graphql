package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.26

import (
	"context"

	"github.com/AI1411/go-grpc-graphql/graph/model"
	"github.com/AI1411/go-grpc-graphql/grpc"
)

// CreateChat is the resolver for the createChat field.
func (r *mutationResolver) CreateChat(ctx context.Context, input model.CreateChatInput) (string, error) {
	res, err := r.ChatClient.CreateChat(ctx, &grpc.CreateChatRequest{
		FromUserId: input.FromUserID,
		ToUserId:   input.ToUserID,
		Body:       input.Body,
	})
	if err != nil {
		return "", err
	}

	return res.GetId(), nil
}

// ListChat is the resolver for the listChat field.
func (r *queryResolver) ListChat(ctx context.Context, input model.ListChatInput) ([]*model.Chat, error) {
	res, err := r.ChatClient.ListChat(ctx, &grpc.ListChatRequest{
		UserId: input.FromUserID,
	})
	if err != nil {
		return nil, err
	}

	chats := make([]*model.Chat, len(res.Chats))
	for i, c := range res.Chats {
		chats[i] = &model.Chat{
			ID:         c.Id,
			Body:       c.Body,
			FromUserID: c.FromUserId,
			ToUserID:   c.ToUserId,
			CreatedAt:  c.CreatedAt.AsTime().String(),
			UpdatedAt:  c.UpdatedAt.AsTime().String(),
		}
	}

	return chats, nil
}
