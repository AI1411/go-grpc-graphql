// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/infra/repository/tweet/tweet_repository.go

// Package mock_tweet is a generated GoMock package.
package mock_tweet

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	entity "github.com/AI1411/go-grpc-graphql/internal/domain/tweet/entity"
)

// MockTweetRepository is a mock of TweetRepository interface.
type MockTweetRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTweetRepositoryMockRecorder
}

// MockTweetRepositoryMockRecorder is the mock recorder for MockTweetRepository.
type MockTweetRepositoryMockRecorder struct {
	mock *MockTweetRepository
}

// NewMockTweetRepository creates a new mock instance.
func NewMockTweetRepository(ctrl *gomock.Controller) *MockTweetRepository {
	mock := &MockTweetRepository{ctrl: ctrl}
	mock.recorder = &MockTweetRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTweetRepository) EXPECT() *MockTweetRepositoryMockRecorder {
	return m.recorder
}

// CreateTweet mocks base method.
func (m *MockTweetRepository) CreateTweet(ctx context.Context, tweet *entity.Tweet) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTweet", ctx, tweet)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTweet indicates an expected call of CreateTweet.
func (mr *MockTweetRepositoryMockRecorder) CreateTweet(ctx, tweet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTweet", reflect.TypeOf((*MockTweetRepository)(nil).CreateTweet), ctx, tweet)
}

// ListTweet mocks base method.
func (m *MockTweetRepository) ListTweet(arg0 context.Context) ([]*entity.Tweet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTweet", arg0)
	ret0, _ := ret[0].([]*entity.Tweet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTweet indicates an expected call of ListTweet.
func (mr *MockTweetRepositoryMockRecorder) ListTweet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTweet", reflect.TypeOf((*MockTweetRepository)(nil).ListTweet), arg0)
}
