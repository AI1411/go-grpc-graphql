// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/infra/repository/chat/chat_repository.go

// Package mock_chat is a generated GoMock package.
package mock_chat

import (
	context "context"
	reflect "reflect"

	entity "github.com/AI1411/go-grpc-graphql/internal/domain/chat/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockChatRepository is a mock of ChatRepository interface.
type MockChatRepository struct {
	ctrl     *gomock.Controller
	recorder *MockChatRepositoryMockRecorder
}

// MockChatRepositoryMockRecorder is the mock recorder for MockChatRepository.
type MockChatRepositoryMockRecorder struct {
	mock *MockChatRepository
}

// NewMockChatRepository creates a new mock instance.
func NewMockChatRepository(ctrl *gomock.Controller) *MockChatRepository {
	mock := &MockChatRepository{ctrl: ctrl}
	mock.recorder = &MockChatRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatRepository) EXPECT() *MockChatRepositoryMockRecorder {
	return m.recorder
}

// CreateChat mocks base method.
func (m *MockChatRepository) CreateChat(ctx context.Context, chat *entity.Chat) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChat", ctx, chat)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChat indicates an expected call of CreateChat.
func (mr *MockChatRepositoryMockRecorder) CreateChat(ctx, chat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChat", reflect.TypeOf((*MockChatRepository)(nil).CreateChat), ctx, chat)
}

// ListChat mocks base method.
func (m *MockChatRepository) ListChat(ctx context.Context, chat *entity.Chat) ([]*entity.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChat", ctx, chat)
	ret0, _ := ret[0].([]*entity.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChat indicates an expected call of ListChat.
func (mr *MockChatRepositoryMockRecorder) ListChat(ctx, chat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChat", reflect.TypeOf((*MockChatRepository)(nil).ListChat), ctx, chat)
}

// MarkChatAsRead mocks base method.
func (m *MockChatRepository) MarkChatAsRead(ctx context.Context, chatID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkChatAsRead", ctx, chatID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkChatAsRead indicates an expected call of MarkChatAsRead.
func (mr *MockChatRepositoryMockRecorder) MarkChatAsRead(ctx, chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkChatAsRead", reflect.TypeOf((*MockChatRepository)(nil).MarkChatAsRead), ctx, chatID)
}
